#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 290)

def self.parse(sql)
  new.scan_str(sql)
rescue Racc::ParseError => err
  raise err.to_s.strip
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    36,    77,  -112,    22,   139,   184,    56,    77,   195,   132,
   186,     3,   187,   188,   196,    71,    70,    36,    85,   133,
   189,   135,   136,    85,   137,   138,    53,   155,    51,    12,
    53,   155,   104,  -112,  -112,  -112,    53,    39,    40,    57,
    37,    28,    30,    31,    32,    33,    12,    41,    36,    44,
    53,    22,   206,     3,    39,    40,   170,    37,    28,    30,
    31,    32,    33,   132,    41,    36,    44,   191,    22,    39,
    40,   108,   109,   133,   210,   135,   136,    12,   137,   138,
   217,   218,    54,    55,   213,    39,    40,    12,    37,    28,
    30,    31,    32,    33,    12,    41,    36,    44,   220,    22,
   222,     3,    39,    40,   223,    37,    28,    30,    31,    32,
    33,   225,    41,    36,    44,   155,    22,    53,   231,   232,
     3,    53,     4,     6,    45,    12,    46,    49,    50,   -69,
    61,    62,    36,    39,    40,   189,    37,    28,    30,    31,
    32,    33,    12,    41,    63,    44,    64,    65,    66,  -130,
    39,    40,    67,    37,    28,    30,    31,    32,    33,    68,
    41,    12,    44,    36,    69,    72,   112,    79,     3,    39,
    40,    85,    37,    28,    30,    31,    32,    33,    53,    41,
    36,    44,    92,    22,   119,    53,     8,   100,   105,   106,
   111,   116,    12,   141,   142,   143,   144,   145,   146,   147,
    39,    40,   150,    37,    28,    30,    31,    32,    33,    12,
    41,    36,    44,   151,   112,   155,   167,    39,    40,   170,
    37,    28,    30,    31,    32,    33,    85,    41,    36,    44,
   173,   189,   119,   174,   175,   176,   177,    53,    12,   116,
    12,   183,    92,   191,   nil,   nil,   nil,    36,    39,    40,
    22,    37,    28,    30,    31,    32,    33,    12,    41,   nil,
    44,   nil,   nil,   nil,   nil,    39,    40,   nil,    37,    28,
    30,    31,    32,    33,   nil,    41,    12,    44,   nil,   nil,
    36,   nil,   nil,    22,    39,    40,    94,    37,    28,    30,
    31,    32,    33,   nil,    41,   nil,    44,    36,   nil,   nil,
    22,   156,   157,   nil,   158,   159,   160,   nil,   nil,    12,
   nil,   161,   162,   163,   164,   165,   166,    39,    40,   nil,
    37,    28,    30,    31,    32,    33,    12,    41,    36,    44,
   nil,   112,   nil,   nil,    39,    40,   nil,    37,    28,    30,
    31,    32,    33,   nil,    41,    36,    44,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   116,    12,   nil,   nil,
   nil,   nil,   nil,   nil,    36,    39,    40,    22,    37,    28,
    30,    31,    32,    33,    12,    41,   nil,    44,   nil,   nil,
   nil,   nil,    39,    40,   nil,    37,    28,    30,    31,    32,
    33,   nil,    41,    12,    44,    36,   nil,   nil,   112,   nil,
   nil,    39,    40,   nil,    37,    28,    30,    31,    32,    33,
   nil,    41,   nil,    44,   nil,   nil,   119,   nil,   nil,   nil,
   nil,   nil,    36,   116,    12,   112,   nil,   nil,   nil,   nil,
   nil,   nil,    39,    40,   nil,    37,    28,    30,    31,    32,
    33,   nil,    41,   119,    44,   nil,   nil,   nil,   nil,    36,
   116,    12,   112,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    40,   nil,    37,    28,    30,    31,    32,    33,   nil,    41,
   119,    44,    36,   nil,   nil,   189,   nil,   116,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,   nil,    37,
    28,    30,    31,    32,    33,   nil,    41,    36,    44,   nil,
   189,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    40,   nil,    37,    28,    30,    31,    32,    33,   nil,    41,
    36,    44,   nil,   189,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,    40,   nil,    37,    28,    30,
    31,    32,    33,   nil,    41,    36,    44,   nil,   189,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,   nil,
    37,    28,    30,    31,    32,    33,   nil,    41,    36,    44,
   nil,   189,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,    40,   nil,    37,    28,    30,    31,    32,
    33,   nil,    41,    36,    44,   nil,   189,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,    40,   nil,    37,    28,
    30,    31,    32,    33,   nil,    41,    36,    44,   nil,   189,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    39,    40,   nil,    37,    28,    30,    31,    32,    33,   nil,
    41,    36,    44,   nil,   189,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    39,    40,   nil,    37,    28,    30,    31,
    32,    33,   nil,    41,   nil,    44,    36,   nil,   nil,   112,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,
   nil,    37,    28,    30,    31,    32,    33,   119,    41,    36,
    44,   nil,    22,   nil,   116,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    39,    40,   nil,    37,    28,    30,    31,
    32,    33,   nil,    41,    36,    44,   nil,    22,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    28,    30,    31,    32,    33,   nil,    41,    36,    44,   nil,
    22,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,    40,   nil,    37,    28,    30,    31,    32,    33,
   nil,    41,    36,    44,   nil,    22,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,    40,   nil,    37,    28,    30,
    31,    32,    33,   nil,    41,    36,    44,   nil,   189,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,
    40,   nil,    37,    28,    30,    31,    32,    33,   nil,    41,
    36,    44,   nil,    22,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    39,    40,   nil,    37,    28,    30,    31,    32,
    33,   nil,    41,   nil,    44,   nil,   nil,   nil,   nil,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,   nil,
    37,    28,    30,    31,    32,    33,   nil,    41,   nil,    44 ]

racc_action_check = [
    65,    46,    14,    65,    81,   153,    16,   106,   160,    80,
   156,   167,   156,   156,   160,    41,    41,   188,   173,    80,
   188,    80,    80,   174,    80,    80,    81,   179,    11,    65,
    46,   153,    69,    14,    14,    14,   106,    65,    65,    16,
    65,    65,    65,    65,    65,    65,   188,    65,   189,    65,
    11,   189,   180,   189,   188,   188,   185,   188,   188,   188,
   188,   188,   188,   205,   188,    56,   188,   187,    56,    69,
    69,    75,    75,   205,   190,   205,   205,   189,   205,   205,
   205,   205,    15,    15,   195,   189,   189,   206,   189,   189,
   189,   189,   189,   189,    56,   189,   191,   189,   207,   191,
   211,   191,    56,    56,   212,    56,    56,    56,    56,    56,
    56,   218,    56,    57,    56,   224,    57,   225,   228,   229,
     0,   232,     1,     2,     4,   191,     6,     7,    10,    12,
    25,    28,   210,   191,   191,   210,   191,   191,   191,   191,
   191,   191,    57,   191,    30,   191,    31,    32,    33,    34,
    57,    57,    36,    57,    57,    57,    57,    57,    57,    37,
    57,   210,    57,   112,    38,    44,   112,    48,   112,   210,
   210,    49,   210,   210,   210,   210,   210,   210,    51,   210,
     3,   210,    60,     3,   112,    61,     3,    67,    70,    73,
    78,   112,   112,    94,    95,    96,    97,    98,    99,   103,
   112,   112,   110,   112,   112,   112,   112,   112,   112,     3,
   112,   217,   112,   111,   217,   113,   116,     3,     3,   117,
     3,     3,     3,     3,     3,     3,   132,     3,   220,     3,
   133,   220,   217,   134,   136,   137,   138,   139,   151,   217,
   217,   152,   154,   158,   nil,   nil,   nil,   223,   217,   217,
   223,   217,   217,   217,   217,   217,   217,   220,   217,   nil,
   217,   nil,   nil,   nil,   nil,   220,   220,   nil,   220,   220,
   220,   220,   220,   220,   nil,   220,   223,   220,   nil,   nil,
    62,   nil,   nil,    62,   223,   223,    62,   223,   223,   223,
   223,   223,   223,   nil,   223,   nil,   223,    63,   nil,   nil,
    63,   115,   115,   nil,   115,   115,   115,   nil,   nil,    62,
   nil,   115,   115,   115,   115,   115,   115,    62,    62,   nil,
    62,    62,    62,    62,    62,    62,    63,    62,   119,    62,
   nil,   119,   nil,   nil,    63,    63,   nil,    63,    63,    63,
    63,    63,    63,   nil,    63,    64,    63,   nil,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,   119,   nil,   nil,
   nil,   nil,   nil,   nil,    66,   119,   119,    66,   119,   119,
   119,   119,   119,   119,    64,   119,   nil,   119,   nil,   nil,
   nil,   nil,    64,    64,   nil,    64,    64,    64,    64,    64,
    64,   nil,    64,    66,    64,   150,   nil,   nil,   150,   nil,
   nil,    66,    66,   nil,    66,    66,    66,    66,    66,    66,
   nil,    66,   nil,    66,   nil,   nil,   150,   nil,   nil,   nil,
   nil,   nil,    79,   150,   150,    79,   nil,   nil,   nil,   nil,
   nil,   nil,   150,   150,   nil,   150,   150,   150,   150,   150,
   150,   nil,   150,    79,   150,   nil,   nil,   nil,   nil,   155,
    79,    79,   155,   nil,   nil,   nil,   nil,   nil,   nil,    79,
    79,   nil,    79,    79,    79,    79,    79,    79,   nil,    79,
   155,    79,   157,   nil,   nil,   157,   nil,   155,   155,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   155,   155,   nil,   155,
   155,   155,   155,   155,   155,   nil,   155,   159,   155,   nil,
   159,   157,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   157,
   157,   nil,   157,   157,   157,   157,   157,   157,   nil,   157,
   161,   157,   nil,   161,   nil,   nil,   159,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   159,   159,   nil,   159,   159,   159,
   159,   159,   159,   nil,   159,   162,   159,   nil,   162,   161,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,   161,   nil,
   161,   161,   161,   161,   161,   161,   nil,   161,   163,   161,
   nil,   163,   nil,   nil,   162,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   162,   162,   nil,   162,   162,   162,   162,   162,
   162,   nil,   162,   164,   162,   nil,   164,   163,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   163,   163,   nil,   163,   163,
   163,   163,   163,   163,   nil,   163,   165,   163,   nil,   165,
   nil,   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   164,   164,   nil,   164,   164,   164,   164,   164,   164,   nil,
   164,   166,   164,   nil,   166,   165,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   165,   165,   nil,   165,   165,   165,   165,
   165,   165,   nil,   165,   nil,   165,   170,   nil,   nil,   170,
   166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   166,   166,
   nil,   166,   166,   166,   166,   166,   166,   170,   166,    17,
   166,   nil,    17,   nil,   170,   170,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   170,   170,   nil,   170,   170,   170,   170,
   170,   170,   nil,   170,    50,   170,   nil,    50,    17,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,
    17,    17,    17,    17,    17,   nil,    17,    22,    17,   nil,
    22,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    50,   nil,    50,    50,    50,    50,    50,    50,
   nil,    50,    54,    50,   nil,    54,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    22,   nil,    22,    22,    22,
    22,    22,    22,   nil,    22,   186,    22,   nil,   186,   nil,
   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,
    54,   nil,    54,    54,    54,    54,    54,    54,   nil,    54,
    55,    54,   nil,    55,   186,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   186,   186,   nil,   186,   186,   186,   186,   186,
   186,   nil,   186,   nil,   186,   nil,   nil,   nil,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,    55,   nil,
    55,    55,    55,    55,    55,    55,   nil,    55,   nil,    55 ]

racc_action_pointer = [
   110,   122,   121,   175,   124,   nil,   123,   114,   nil,   nil,
   124,    16,    84,   nil,    -9,    40,    -5,   684,   nil,   nil,
   nil,   nil,   732,   nil,   nil,    85,   nil,   nil,   123,   nil,
   136,   138,   139,   140,    98,   nil,   107,   154,   113,   nil,
   nil,   -37,   nil,   nil,   110,   nil,    -4,   nil,   144,   137,
   709,   144,   nil,   nil,   757,   805,    60,   108,   nil,   nil,
   173,   151,   275,   292,   340,    -5,   359,   182,   nil,    27,
   136,   nil,   nil,   185,   nil,    65,   nil,   nil,   166,   417,
     5,    -8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   184,   185,   186,   187,   188,   189,
   nil,   nil,   nil,   194,   nil,   nil,     2,   nil,   nil,   nil,
   177,   210,   158,   180,   nil,   275,   208,   191,   nil,   323,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   192,   215,   218,   nil,   216,   217,   218,   203,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   390,   204,   232,    -4,   233,   444,   -17,   467,   235,   492,
   -18,   515,   540,   563,   588,   611,   636,     1,   nil,   nil,
   661,   nil,   nil,   -16,   -11,   nil,   nil,   nil,   nil,    -8,
    48,   nil,   nil,   nil,   nil,    28,   780,    59,    12,    43,
    46,    91,   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    59,    53,    70,   nil,   nil,
   127,    91,   100,   nil,   nil,   nil,   nil,   206,   103,   nil,
   223,   nil,   nil,   242,    80,    83,   nil,   nil,   109,   115,
   nil,   nil,    87,   nil ]

racc_action_default = [
  -142,  -142,    -2,  -142,  -142,    -1,  -142,   -14,   -15,   -16,
   -18,   -21,  -136,   -96,   -97,  -100,  -103,  -142,  -105,  -106,
  -107,  -108,  -142,  -110,  -111,  -142,  -114,  -115,  -142,  -117,
  -142,  -142,  -142,  -142,  -123,  -124,  -128,  -142,  -142,  -134,
  -135,  -142,  -139,  -140,  -142,   234,  -142,   -13,   -46,  -142,
  -142,  -142,   -20,  -136,  -142,  -142,  -142,  -142,  -104,  -112,
  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -126,  -127,  -142,
  -142,  -138,  -141,    -3,    -5,    -9,    -7,    -8,   -48,  -142,
   -23,   -26,   -27,   -29,   -30,   -69,   -17,   -19,   -98,   -99,
  -101,  -102,  -109,  -113,  -142,  -142,  -142,  -142,  -142,  -142,
  -125,  -129,  -131,  -142,  -133,  -137,  -142,    -6,   -10,   -11,
   -53,  -142,  -142,   -47,   -55,  -142,  -142,   -72,   -74,  -142,
   -77,   -78,   -79,   -81,   -82,   -83,   -84,   -85,   -86,   -93,
   -94,   -95,  -142,  -142,  -142,   -34,   -36,   -38,   -39,  -142,
   -25,  -116,  -118,  -119,  -120,  -121,  -122,  -132,    -4,   -22,
  -142,  -142,  -142,  -142,   -95,  -142,  -142,  -142,  -142,  -142,
  -142,  -142,  -142,  -142,  -142,  -142,  -142,  -142,   -28,   -68,
  -142,   -76,   -31,  -142,  -142,   -35,   -37,   -40,   -24,   -54,
   -49,   -51,   -52,   -12,   -80,   -73,  -142,  -142,  -142,  -142,
  -142,  -142,   -59,   -60,   -65,  -142,   -67,   -87,   -88,   -89,
   -90,   -91,   -92,   -75,   -32,  -142,  -142,  -142,   -58,   -64,
  -142,  -142,   -63,   -66,   -33,   -41,   -42,  -142,  -142,   -50,
  -142,   -57,   -61,  -142,   -43,  -142,   -56,   -62,  -142,   -45,
   -71,   -44,  -142,   -70 ]

racc_goto_table = [
    52,   113,    11,   168,   182,    81,    80,    74,     9,   211,
   229,   181,     1,   192,    90,    91,    88,    89,   185,   203,
   171,    60,   190,   103,   194,    58,   197,   198,   199,   200,
   201,   202,   101,   102,   153,    76,   180,     2,     5,    59,
    87,   227,   208,    73,   107,   168,     7,    47,    48,    11,
    93,   207,    78,   209,   110,    86,   149,   169,   214,   182,
   215,    95,    96,    97,    98,    99,   219,   148,   216,   228,
   140,   nil,   179,   nil,   168,   221,    59,    59,    59,    59,
   nil,   nil,   nil,   nil,   nil,   226,   nil,   nil,   172,   nil,
   nil,   nil,   nil,   nil,   nil,    76,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   178,   204,
    81,   205,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   224,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,
   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   230,   nil,   nil,   nil,   nil,   nil,
   nil,   233,   212 ]

racc_goto_check = [
     8,    29,    14,     9,    34,    20,    19,     5,    12,    40,
    31,    33,     1,    39,    53,    53,    51,    51,    44,    45,
    46,    14,    37,    55,    37,    56,    37,    37,    37,    37,
    37,    37,    66,    67,    29,     8,    32,     2,     3,    52,
     8,    40,    39,     4,     7,     9,    10,    11,    15,    14,
     8,    37,    16,    37,    17,    12,    18,    22,    26,    34,
    27,    14,    14,    14,    14,    14,    33,     5,    28,    30,
     8,   nil,    29,   nil,     9,    37,    52,    52,    52,    52,
   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,    20,
    20,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,
   nil,     8,    14 ]

racc_goto_pointer = [
   nil,    12,    37,    36,    -3,   -39,   nil,   -31,   -11,  -113,
    43,    40,     5,   nil,    -1,    41,     4,   -24,   -54,   -43,
   -44,   nil,   -59,   nil,   nil,   nil,  -147,  -145,  -137,   -78,
  -156,  -215,  -115,  -140,  -147,   nil,   nil,  -135,   nil,  -145,
  -182,   nil,   nil,   nil,  -137,  -151,   -99,   nil,   nil,   nil,
   nil,   -38,    22,   -42,   nil,   -46,     8,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -37,   -36,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   152,   nil,   nil,   nil,    75,   nil,    26,   114,
   nil,   nil,   nil,    10,   131,   nil,   nil,   nil,   nil,   nil,
    27,    82,   193,    83,    84,   134,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    20,   130,   124,   115,   125,   nil,
   nil,   126,   127,   128,   117,   118,   120,   121,   122,   123,
   129,    13,    14,    15,    16,    17,    18,    19,    21,    23,
    24,    25,    29,    34,    35,    38,   nil,   nil,    42,    43 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 57, :_reduce_1,
  0, 59, :_reduce_none,
  3, 59, :_reduce_3,
  3, 60, :_reduce_4,
  1, 60, :_reduce_none,
  2, 61, :_reduce_6,
  1, 62, :_reduce_none,
  1, 62, :_reduce_8,
  0, 63, :_reduce_9,
  1, 63, :_reduce_10,
  1, 63, :_reduce_11,
  3, 65, :_reduce_12,
  3, 58, :_reduce_13,
  2, 58, :_reduce_14,
  1, 66, :_reduce_15,
  1, 66, :_reduce_16,
  3, 68, :_reduce_17,
  1, 68, :_reduce_none,
  3, 69, :_reduce_19,
  2, 69, :_reduce_20,
  1, 69, :_reduce_none,
  4, 67, :_reduce_22,
  2, 71, :_reduce_23,
  3, 75, :_reduce_24,
  2, 75, :_reduce_25,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 78, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  3, 79, :_reduce_31,
  4, 79, :_reduce_32,
  5, 80, :_reduce_33,
  1, 81, :_reduce_34,
  2, 81, :_reduce_35,
  1, 81, :_reduce_36,
  2, 81, :_reduce_37,
  1, 81, :_reduce_38,
  1, 81, :_reduce_39,
  2, 81, :_reduce_40,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  2, 83, :_reduce_43,
  4, 84, :_reduce_44,
  1, 86, :_reduce_none,
  0, 72, :_reduce_none,
  2, 72, :_reduce_47,
  0, 73, :_reduce_none,
  3, 73, :_reduce_49,
  3, 88, :_reduce_50,
  1, 88, :_reduce_none,
  1, 89, :_reduce_none,
  0, 74, :_reduce_none,
  2, 74, :_reduce_54,
  1, 91, :_reduce_none,
  6, 92, :_reduce_56,
  5, 92, :_reduce_57,
  4, 94, :_reduce_58,
  3, 94, :_reduce_59,
  1, 95, :_reduce_none,
  3, 95, :_reduce_61,
  3, 96, :_reduce_62,
  1, 96, :_reduce_none,
  4, 97, :_reduce_64,
  3, 97, :_reduce_65,
  4, 98, :_reduce_66,
  3, 98, :_reduce_67,
  2, 99, :_reduce_68,
  1, 76, :_reduce_69,
  3, 87, :_reduce_70,
  1, 87, :_reduce_none,
  1, 85, :_reduce_none,
  3, 85, :_reduce_73,
  1, 100, :_reduce_none,
  3, 100, :_reduce_75,
  2, 101, :_reduce_76,
  1, 101, :_reduce_none,
  1, 102, :_reduce_none,
  1, 103, :_reduce_none,
  3, 103, :_reduce_80,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 105, :_reduce_87,
  3, 105, :_reduce_88,
  3, 105, :_reduce_89,
  3, 105, :_reduce_90,
  3, 105, :_reduce_91,
  3, 105, :_reduce_92,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 106, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  3, 107, :_reduce_98,
  3, 107, :_reduce_99,
  1, 107, :_reduce_none,
  3, 109, :_reduce_101,
  3, 109, :_reduce_102,
  1, 109, :_reduce_none,
  2, 110, :_reduce_104,
  1, 110, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  3, 112, :_reduce_109,
  1, 113, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  3, 90, :_reduce_113,
  1, 90, :_reduce_none,
  1, 117, :_reduce_none,
  4, 114, :_reduce_116,
  1, 114, :_reduce_none,
  4, 118, :_reduce_118,
  4, 118, :_reduce_119,
  4, 118, :_reduce_120,
  4, 118, :_reduce_121,
  4, 118, :_reduce_122,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 119, :_reduce_125,
  2, 119, :_reduce_126,
  2, 119, :_reduce_127,
  1, 119, :_reduce_128,
  3, 120, :_reduce_129,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  2, 123, :_reduce_132,
  1, 123, :_reduce_133,
  1, 111, :_reduce_134,
  1, 111, :_reduce_135,
  1, 64, :_reduce_136,
  3, 108, :_reduce_137,
  2, 108, :_reduce_138,
  1, 108, :_reduce_none,
  1, 124, :_reduce_none,
  2, 125, :_reduce_141 ]

racc_reduce_n = 142

racc_shift_n = 234

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :SELECT => 10,
  :asterisk => 11,
  :AS => 12,
  :FROM => 13,
  :CROSS => 14,
  :JOIN => 15,
  :INNER => 16,
  :LEFT => 17,
  :OUTER => 18,
  :RIGHT => 19,
  :FULL => 20,
  :ON => 21,
  :USING => 22,
  :WHERE => 23,
  :GROUP => 24,
  :HAVING => 25,
  :NOT => 26,
  :BETWEEN => 27,
  :AND => 28,
  :IN => 29,
  :LIKE => 30,
  :IS => 31,
  :NULL => 32,
  :EXISTS => 33,
  :identifier => 34,
  :OR => 35,
  :equals_operator => 36,
  :not_equals_operator => 37,
  :less_than_operator => 38,
  :greater_than_operator => 39,
  :less_than_or_equals_operator => 40,
  :greater_than_or_equals_operator => 41,
  :plus_sign => 42,
  :minus_sign => 43,
  :solidus => 44,
  :period => 45,
  :COUNT => 46,
  :AVG => 47,
  :MAX => 48,
  :MIN => 49,
  :SUM => 50,
  :E => 51,
  :quote => 52,
  :character_string_literal => 53,
  :DATE => 54,
  :date_string => 55 }

racc_nt_base = 56

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "value_expression",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_reference",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "in_value_list",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 4)
  def _reduce_1(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.racc', 8)
  def _reduce_3(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 11)
  def _reduce_4(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_17(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_33(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_50(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_62(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_70(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_104(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_109(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_132(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
