#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 299)

def self.parse(sql)
  new.scan_str(sql)
rescue Racc::ParseError => err
  raise err.to_s.strip
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
   182,   131,   177,    57,    52,   100,   124,   229,   220,   125,
   220,   127,   128,   201,   129,   130,   146,    21,   188,     3,
   202,    54,    35,    54,   189,   161,    38,    39,   228,   179,
    54,   180,   181,    54,    21,    11,  -116,   146,   184,    35,
    72,    71,   206,    38,    39,    58,    36,    27,    29,    30,
    31,    32,    11,    40,   209,    44,    35,    45,    46,   215,
    38,    39,    11,    36,    27,    29,    30,    31,    32,    11,
    40,    21,    44,     3,    45,    46,  -116,  -116,  -116,   222,
    36,    27,    29,    30,    31,    32,   224,    40,    21,    44,
   225,    45,    46,    35,   232,   233,    55,    56,   227,   230,
   146,    54,   239,   240,   242,    21,    11,   243,    90,     3,
    35,    54,     4,    47,    38,    39,    49,    36,    27,    29,
    30,    31,    32,    11,    40,    51,    44,    35,    45,    46,
   -73,    38,    39,    62,    36,    27,    29,    30,    31,    32,
    11,    40,   104,    44,    63,    45,    46,    64,    38,    39,
    65,    36,    27,    29,    30,    31,    32,    66,    40,   182,
    44,    67,    45,    46,    35,  -134,    68,    69,    70,    73,
    75,    81,    54,    88,    54,    96,   108,    11,   101,   103,
   133,    35,   134,   135,   136,    38,    39,   137,    36,    27,
    29,    30,    31,    32,    11,    40,    21,    44,   138,    45,
    46,   139,    38,    39,   141,    36,    27,    29,    30,    31,
    32,   142,    40,    21,    44,   146,    45,    46,    35,   124,
   158,   161,   125,    81,   127,   128,   164,   129,   130,   213,
   214,    11,   165,   166,   167,    35,   168,    54,   171,    38,
    39,    11,    36,    27,    29,    30,    31,    32,    11,    40,
   104,    44,   176,    45,    46,    88,    38,    39,   184,    36,
    27,    29,    30,    31,    32,     3,    40,    21,    44,    81,
    45,    46,    35,    81,   200,   nil,   nil,   111,   nil,   nil,
   nil,   nil,   nil,   nil,   108,    11,   nil,   nil,   nil,    35,
   nil,   nil,   nil,    38,    39,   nil,    36,    27,    29,    30,
    31,    32,    11,    40,    21,    44,   nil,    45,    46,   nil,
    38,    39,   nil,    36,    27,    29,    30,    31,    32,   nil,
    40,   182,    44,   nil,    45,    46,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    11,
   nil,   nil,   nil,    35,   nil,   nil,   nil,    38,    39,   nil,
    36,    27,    29,    30,    31,    32,    11,    40,   nil,    44,
    35,    45,    46,   nil,    38,    39,   nil,    36,    27,    29,
    30,    31,    32,    11,    40,   nil,    44,   104,    45,    46,
   nil,    38,    39,   nil,    36,    27,    29,    30,    31,    32,
   nil,    40,   nil,    44,    21,    45,    46,     6,     7,    35,
   nil,   nil,   nil,   nil,   111,   nil,   nil,   nil,   nil,   nil,
   nil,   108,    11,   nil,   nil,   nil,    35,   nil,   nil,   nil,
    38,    39,   nil,    36,    27,    29,    30,    31,    32,    11,
    40,   104,    44,   nil,    45,    46,   nil,    38,    39,   nil,
    36,    27,    29,    30,    31,    32,   nil,    40,   nil,    44,
   nil,    45,    46,    35,   nil,   nil,   nil,   nil,   111,   nil,
   nil,   nil,   nil,   104,   nil,   108,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    38,    39,   nil,    36,    27,    29,
    30,    31,    32,   nil,    40,    35,    44,   nil,    45,    46,
   111,   nil,   nil,   182,   nil,   nil,   nil,   108,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,    21,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   182,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   182,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   182,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   182,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   182,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   182,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,    35,    40,   nil,    44,   nil,
    45,    46,   nil,   nil,   nil,   104,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,    36,
    27,    29,    30,    31,    32,   nil,    40,    35,    44,   nil,
    45,    46,   111,   nil,   nil,    21,   nil,   nil,   nil,   108,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,    35,    40,   nil,
    44,   nil,    45,    46,   nil,    21,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,    35,    40,   nil,
    44,   nil,    45,    46,   nil,    21,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,    35,    40,   nil,
    44,   nil,    45,    46,   nil,    21,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,    35,    40,   nil,
    44,   nil,    45,    46,   nil,    21,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,    35,    40,   nil,
    44,   nil,    45,    46,   nil,   182,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,    35,    40,   nil,
    44,   nil,    45,    46,   nil,   nil,   nil,   104,   nil,     3,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    39,
   nil,    36,    27,    29,    30,    31,    32,   nil,    40,    35,
    44,   nil,    45,    46,   111,   nil,   nil,   182,   nil,   nil,
   nil,   108,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,    39,   nil,    36,    27,    29,    30,    31,    32,    35,
    40,   nil,    44,   nil,    45,    46,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,    39,   nil,    36,    27,    29,    30,    31,    32,   nil,
    40,   nil,    44,   nil,    45,    46,   147,   148,   nil,   149,
   150,   151,   nil,   nil,   nil,   nil,   152,   153,   154,   155,
   156,   157 ]

racc_action_check = [
   156,    77,   144,    15,    10,    70,    76,   215,   201,    76,
   230,    76,    76,   171,    76,    76,   172,   182,   151,   182,
   173,   201,   156,   230,   151,   178,    70,    70,   215,   147,
    77,   147,   147,    10,    16,   156,    13,   144,   180,   182,
    40,    40,   183,   156,   156,    15,   156,   156,   156,   156,
   156,   156,   182,   156,   188,   156,    16,   156,   156,   200,
   182,   182,   202,   182,   182,   182,   182,   182,   182,    16,
   182,   184,   182,   184,   182,   182,    13,    13,    13,   203,
    16,    16,    16,    16,    16,    16,   207,    16,    21,    16,
   208,    16,    16,   184,   218,   218,    14,    14,   214,   216,
   226,   227,   228,   229,   236,    63,   184,   237,    63,     0,
    21,   243,     1,     4,   184,   184,     5,   184,   184,   184,
   184,   184,   184,    21,   184,     9,   184,    63,   184,   184,
    11,    21,    21,    24,    21,    21,    21,    21,    21,    21,
    63,    21,   111,    21,    27,    21,    21,    29,    63,    63,
    30,    63,    63,    63,    63,    63,    63,    31,    63,   206,
    63,    32,    63,    63,   111,    33,    35,    36,    37,    44,
    48,    49,    52,    61,    62,    68,   111,   111,    71,    74,
    90,   206,    91,    92,    93,   111,   111,    94,   111,   111,
   111,   111,   111,   111,   206,   111,    64,   111,    95,   111,
   111,    99,   206,   206,   102,   206,   206,   206,   206,   206,
   206,   103,   206,    65,   206,   105,   206,   206,    64,   198,
   108,   109,   198,   124,   198,   198,   125,   198,   198,   198,
   198,    64,   126,   128,   129,    65,   130,   131,   140,    64,
    64,   142,    64,    64,    64,    64,    64,    64,    65,    64,
   213,    64,   143,    64,    64,   145,    65,    65,   149,    65,
    65,    65,    65,    65,    65,   158,    65,    66,    65,   164,
    65,    65,   213,   165,   170,   nil,   nil,   213,   nil,   nil,
   nil,   nil,   nil,   nil,   213,   213,   nil,   nil,   nil,    66,
   nil,   nil,   nil,   213,   213,   nil,   213,   213,   213,   213,
   213,   213,    66,   213,    67,   213,   nil,   213,   213,   nil,
    66,    66,   nil,    66,    66,    66,    66,    66,    66,   nil,
    66,   222,    66,   nil,    66,    66,    67,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,    67,
   nil,   nil,   nil,   222,   nil,   nil,   nil,    67,    67,   nil,
    67,    67,    67,    67,    67,    67,   222,    67,   nil,    67,
   225,    67,    67,   nil,   222,   222,   nil,   222,   222,   222,
   222,   222,   222,   225,   222,   nil,   222,   141,   222,   222,
   nil,   225,   225,   nil,   225,   225,   225,   225,   225,   225,
   nil,   225,   nil,   225,     3,   225,   225,     3,     3,   141,
   nil,   nil,   nil,   nil,   141,   nil,   nil,   nil,   nil,   nil,
   nil,   141,   141,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   141,   141,   nil,   141,   141,   141,   141,   141,   141,     3,
   141,    75,   141,   nil,   141,   141,   nil,     3,     3,   nil,
     3,     3,     3,     3,     3,     3,   nil,     3,   nil,     3,
   nil,     3,     3,    75,   nil,   nil,   nil,   nil,    75,   nil,
   nil,   nil,   nil,   146,   nil,    75,    75,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    75,    75,   nil,    75,    75,    75,
    75,    75,    75,   nil,    75,   146,    75,   nil,    75,    75,
   146,   nil,   nil,   148,   nil,   nil,   nil,   146,   146,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   146,   146,   nil,   146,
   146,   146,   146,   146,   146,   148,   146,   nil,   146,   nil,
   146,   146,   nil,     7,   nil,   nil,   nil,   nil,   148,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   148,   148,   nil,   148,
   148,   148,   148,   148,   148,     7,   148,   nil,   148,   nil,
   148,   148,   nil,   150,   nil,   nil,   nil,   nil,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     7,     7,   nil,     7,
     7,     7,     7,     7,     7,   150,     7,   nil,     7,   nil,
     7,     7,   nil,   152,   nil,   nil,   nil,   nil,   150,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   150,   150,   nil,   150,
   150,   150,   150,   150,   150,   152,   150,   nil,   150,   nil,
   150,   150,   nil,   153,   nil,   nil,   nil,   nil,   152,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   152,   152,   nil,   152,
   152,   152,   152,   152,   152,   153,   152,   nil,   152,   nil,
   152,   152,   nil,   154,   nil,   nil,   nil,   nil,   153,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   153,   153,   nil,   153,
   153,   153,   153,   153,   153,   154,   153,   nil,   153,   nil,
   153,   153,   nil,   155,   nil,   nil,   nil,   nil,   154,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   154,   154,   nil,   154,
   154,   154,   154,   154,   154,   155,   154,   nil,   154,   nil,
   154,   154,   nil,   157,   nil,   nil,   nil,   nil,   155,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   155,   155,   nil,   155,
   155,   155,   155,   155,   155,   157,   155,   nil,   155,   nil,
   155,   155,   nil,   nil,   nil,   161,   nil,   nil,   157,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   157,   157,   nil,   157,
   157,   157,   157,   157,   157,   nil,   157,   161,   157,   nil,
   157,   157,   161,   nil,   nil,    51,   nil,   nil,   nil,   161,
   161,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,   161,
   nil,   161,   161,   161,   161,   161,   161,    51,   161,   nil,
   161,   nil,   161,   161,   nil,    55,   nil,   nil,   nil,   nil,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,    51,
   nil,    51,    51,    51,    51,    51,    51,    55,    51,   nil,
    51,   nil,    51,    51,   nil,    56,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,    55,
   nil,    55,    55,    55,    55,    55,    55,    56,    55,   nil,
    55,   nil,    55,    55,   nil,    57,   nil,   nil,   nil,   nil,
    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,    56,
   nil,    56,    56,    56,    56,    56,    56,    57,    56,   nil,
    56,   nil,    56,    56,   nil,    58,   nil,   nil,   nil,   nil,
    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,    57,
   nil,    57,    57,    57,    57,    57,    57,    58,    57,   nil,
    57,   nil,    57,    57,   nil,   179,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,    58,
   nil,    58,    58,    58,    58,    58,    58,   179,    58,   nil,
    58,   nil,    58,    58,   nil,   nil,   nil,   104,   nil,   104,
   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,   179,
   nil,   179,   179,   179,   179,   179,   179,   nil,   179,   104,
   179,   nil,   179,   179,   104,   nil,   nil,   181,   nil,   nil,
   nil,   104,   104,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   104,   104,   nil,   104,   104,   104,   104,   104,   104,   181,
   104,   nil,   104,   nil,   104,   104,   nil,   nil,   nil,   nil,
   nil,   nil,   181,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   181,   181,   nil,   181,   181,   181,   181,   181,   181,   nil,
   181,   nil,   181,   nil,   181,   181,   107,   107,   nil,   107,
   107,   107,   nil,   nil,   nil,   nil,   107,   107,   107,   107,
   107,   107 ]

racc_action_pointer = [
   105,   112,   nil,   392,   113,   107,   nil,   521,   nil,   118,
    -4,    82,   nil,    31,    51,    -2,    32,   nil,   nil,   nil,
   nil,    86,   nil,   nil,    85,   nil,   nil,   142,   nil,   145,
   148,   155,   159,   111,   nil,   118,   143,   114,   nil,   nil,
   -15,   nil,   nil,   nil,   111,   nil,   nil,   nil,   151,   134,
   nil,   763,   135,   nil,   nil,   793,   823,   853,   883,   nil,
   nil,   170,   137,   103,   194,   211,   265,   302,   151,   nil,
   -19,   123,   nil,   nil,   159,   429,    -1,    -7,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   177,   179,   180,   181,   184,   195,   nil,   nil,   nil,   177,
   nil,   nil,   182,   190,   945,   177,   nil,  1007,   218,   190,
   nil,   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   186,   215,   221,   nil,   219,   220,
   222,   200,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   215,   375,   204,   249,    -1,   252,   461,    -1,   491,   256,
   551,   -11,   581,   611,   641,   671,    -2,   701,   261,   nil,
   nil,   733,   nil,   nil,   232,   236,   nil,   nil,   nil,   nil,
   247,    -8,   -22,    13,   nil,   nil,   nil,   nil,    -6,   913,
    36,   975,    15,    11,    69,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   212,   nil,
    35,   -16,    25,    48,   nil,   nil,   157,    83,    83,   nil,
   nil,   nil,   nil,   248,    96,     0,    92,   nil,    69,   nil,
   nil,   nil,   319,   nil,   nil,   336,    62,    64,    78,    79,
   -14,   nil,   nil,   nil,   nil,   nil,   101,   100,   nil,   nil,
   nil,   nil,   nil,    74,   nil ]

racc_action_default = [
  -149,  -149,    -1,  -149,  -149,    -4,    -5,  -149,    -7,    -9,
   -12,  -140,  -100,  -101,  -104,  -107,  -149,  -109,  -110,  -111,
  -112,  -149,  -114,  -115,  -149,  -118,  -119,  -149,  -121,  -149,
  -149,  -149,  -149,  -127,  -128,  -132,  -149,  -149,  -138,  -139,
  -149,  -143,  -144,  -145,  -149,  -147,  -148,   245,   -36,  -149,
    -6,  -149,  -149,   -11,  -140,  -149,  -149,  -149,  -149,  -108,
  -116,  -149,  -149,  -149,  -149,  -149,  -149,  -149,  -130,  -131,
  -149,  -149,  -142,  -146,   -38,  -149,   -13,   -16,   -17,   -19,
   -20,   -73,    -8,   -10,  -102,  -103,  -105,  -106,  -113,  -117,
  -149,  -149,  -149,  -149,  -149,  -149,  -129,  -133,  -135,  -149,
  -137,  -141,   -43,  -149,  -149,   -37,   -59,  -149,  -149,   -76,
   -78,  -149,   -81,   -82,   -83,   -85,   -86,   -87,   -88,   -89,
   -90,   -97,   -98,   -99,  -149,  -149,  -149,   -24,   -26,   -28,
   -29,  -149,   -15,  -120,  -122,  -123,  -124,  -125,  -126,  -136,
   -45,  -149,  -149,  -149,  -149,   -99,  -149,  -149,  -149,  -149,
  -149,  -149,  -149,  -149,  -149,  -149,  -149,  -149,  -149,   -18,
   -72,  -149,   -80,   -21,  -149,  -149,   -25,   -27,   -30,   -14,
   -55,  -149,   -44,   -39,   -41,   -42,    -2,   -84,   -77,  -149,
  -149,  -149,  -149,  -149,  -149,   -63,   -64,   -69,  -149,   -71,
   -91,   -92,   -93,   -94,   -95,   -96,   -79,   -22,  -149,    -3,
  -149,  -149,  -149,  -149,   -62,   -68,  -149,  -149,   -67,   -70,
   -23,   -31,   -32,  -149,  -149,   -58,   -46,   -48,   -52,   -50,
   -51,   -40,  -149,   -61,   -65,  -149,   -33,  -149,  -149,  -149,
  -149,   -49,   -53,   -54,   -60,   -66,  -149,   -35,   -75,   -56,
   -57,   -47,   -34,  -149,   -74 ]

racc_goto_table = [
    53,    10,   105,    76,   159,    10,   175,    77,     8,   174,
   185,   217,    50,   207,    84,    85,    86,    87,    60,    61,
   183,     1,   187,   231,   190,   191,   192,   193,   194,   195,
   178,   144,   196,   162,    99,    59,    97,    98,   216,     2,
   241,   204,    83,     5,    48,   159,    74,   102,   140,    10,
   170,   203,    89,   205,   235,   199,    82,    60,    60,    60,
    60,    91,    92,    93,    94,    95,   175,   132,   172,   221,
   160,   210,   211,   212,   236,   237,   159,   173,   223,   nil,
   nil,   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,
   nil,   169,   197,    77,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   226,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    61,   nil,   208,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,
   219,   nil,   nil,   208,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   244 ]

racc_goto_check = [
    14,    13,    25,    15,     3,    13,    30,    16,    11,    29,
    39,    32,    11,    40,    51,    51,    53,    53,    52,    13,
    37,     1,    37,    34,    37,    37,    37,    37,    37,    37,
    44,    25,    45,    46,    55,    56,    66,    67,    31,     2,
    32,    39,    14,     4,     5,     3,     6,     7,     8,    13,
     9,    37,    14,    37,    40,    10,    11,    52,    52,    52,
    52,    13,    13,    13,    13,    13,    30,    14,    25,    29,
    18,    22,    23,    24,    26,    27,     3,    28,    37,   nil,
   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,    14,    16,    16,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,
    14,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14 ]

racc_goto_pointer = [
   nil,    21,    39,  -104,    40,    39,    -2,   -27,   -54,   -90,
  -115,     5,   nil,    -2,   -10,   -46,   -42,   nil,   -38,   nil,
   nil,   nil,  -127,  -126,  -125,   -73,  -153,  -152,   -65,  -133,
  -136,  -163,  -190,   nil,  -195,   nil,   nil,  -128,   nil,  -139,
  -171,   nil,   nil,   nil,  -116,  -129,   -78,   nil,   nil,   nil,
   nil,   -41,     2,   -41,   nil,   -36,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -34,   -33,   nil,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   143,   106,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   123,    25,   nil,    26,    78,   186,    79,
    80,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   218,   nil,   122,   116,   107,   117,   nil,
   nil,   118,   119,   120,   109,   110,   112,   113,   114,   115,
   121,    12,    13,    14,    15,    16,    17,    18,    20,    22,
    23,    24,    28,    33,    34,    37,   nil,   nil,    41,    42,
    43 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 62, :_reduce_none,
  3, 64, :_reduce_2,
  8, 63, :_reduce_3,
  2, 63, :_reduce_4,
  1, 65, :_reduce_5,
  2, 65, :_reduce_6,
  1, 65, :_reduce_7,
  3, 72, :_reduce_8,
  1, 72, :_reduce_none,
  3, 73, :_reduce_10,
  2, 73, :_reduce_11,
  1, 73, :_reduce_none,
  2, 66, :_reduce_13,
  3, 76, :_reduce_14,
  2, 76, :_reduce_15,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 79, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  3, 80, :_reduce_21,
  4, 80, :_reduce_22,
  5, 81, :_reduce_23,
  1, 82, :_reduce_24,
  2, 82, :_reduce_25,
  1, 82, :_reduce_26,
  2, 82, :_reduce_27,
  1, 82, :_reduce_28,
  1, 82, :_reduce_29,
  2, 82, :_reduce_30,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  2, 84, :_reduce_33,
  4, 85, :_reduce_34,
  1, 87, :_reduce_none,
  0, 67, :_reduce_none,
  2, 67, :_reduce_37,
  0, 68, :_reduce_none,
  3, 68, :_reduce_39,
  3, 89, :_reduce_40,
  1, 89, :_reduce_none,
  1, 90, :_reduce_none,
  0, 69, :_reduce_none,
  2, 69, :_reduce_44,
  0, 70, :_reduce_none,
  3, 70, :_reduce_46,
  3, 92, :_reduce_47,
  1, 92, :_reduce_none,
  2, 93, :_reduce_49,
  1, 94, :_reduce_none,
  1, 94, :_reduce_51,
  0, 95, :_reduce_52,
  1, 95, :_reduce_53,
  1, 95, :_reduce_54,
  0, 71, :_reduce_none,
  4, 71, :_reduce_56,
  4, 71, :_reduce_57,
  2, 71, :_reduce_58,
  1, 96, :_reduce_none,
  6, 97, :_reduce_60,
  5, 97, :_reduce_61,
  4, 99, :_reduce_62,
  3, 99, :_reduce_63,
  1, 100, :_reduce_none,
  3, 100, :_reduce_65,
  3, 101, :_reduce_66,
  1, 101, :_reduce_none,
  4, 102, :_reduce_68,
  3, 102, :_reduce_69,
  4, 103, :_reduce_70,
  3, 103, :_reduce_71,
  2, 104, :_reduce_72,
  1, 77, :_reduce_73,
  3, 88, :_reduce_74,
  1, 88, :_reduce_none,
  1, 86, :_reduce_none,
  3, 86, :_reduce_77,
  1, 105, :_reduce_none,
  3, 105, :_reduce_79,
  2, 106, :_reduce_80,
  1, 106, :_reduce_none,
  1, 107, :_reduce_none,
  1, 108, :_reduce_none,
  3, 108, :_reduce_84,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 110, :_reduce_91,
  3, 110, :_reduce_92,
  3, 110, :_reduce_93,
  3, 110, :_reduce_94,
  3, 110, :_reduce_95,
  3, 110, :_reduce_96,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 111, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  3, 112, :_reduce_102,
  3, 112, :_reduce_103,
  1, 112, :_reduce_none,
  3, 114, :_reduce_105,
  3, 114, :_reduce_106,
  1, 114, :_reduce_none,
  2, 115, :_reduce_108,
  1, 115, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_113,
  1, 118, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 91, :_reduce_117,
  1, 91, :_reduce_none,
  1, 122, :_reduce_none,
  4, 119, :_reduce_120,
  1, 119, :_reduce_none,
  4, 123, :_reduce_122,
  4, 123, :_reduce_123,
  4, 123, :_reduce_124,
  4, 123, :_reduce_125,
  4, 123, :_reduce_126,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 124, :_reduce_129,
  2, 124, :_reduce_130,
  2, 124, :_reduce_131,
  1, 124, :_reduce_132,
  3, 125, :_reduce_133,
  1, 126, :_reduce_none,
  1, 127, :_reduce_none,
  2, 128, :_reduce_136,
  1, 128, :_reduce_137,
  1, 116, :_reduce_138,
  1, 116, :_reduce_139,
  1, 75, :_reduce_140,
  3, 113, :_reduce_141,
  2, 113, :_reduce_142,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 129, :_reduce_none,
  2, 131, :_reduce_146,
  1, 130, :_reduce_147,
  1, 130, :_reduce_148 ]

racc_reduce_n = 149

racc_shift_n = 245

racc_token_table = {
  false => 0,
  :error => 1,
  :left_paren => 2,
  :right_paren => 3,
  :SELECT => 4,
  :asterisk => 5,
  :DISTINCT => 6,
  :comma => 7,
  :AS => 8,
  :FROM => 9,
  :CROSS => 10,
  :JOIN => 11,
  :INNER => 12,
  :LEFT => 13,
  :OUTER => 14,
  :RIGHT => 15,
  :FULL => 16,
  :ON => 17,
  :USING => 18,
  :WHERE => 19,
  :GROUP => 20,
  :BY => 21,
  :HAVING => 22,
  :ORDER => 23,
  :unsigned_integer => 24,
  :ASC => 25,
  :DESC => 26,
  :LIMIT => 27,
  :OFFSET => 28,
  :NOT => 29,
  :BETWEEN => 30,
  :AND => 31,
  :IN => 32,
  :LIKE => 33,
  :IS => 34,
  :NULL => 35,
  :EXISTS => 36,
  :identifier => 37,
  :OR => 38,
  :equals_operator => 39,
  :not_equals_operator => 40,
  :less_than_operator => 41,
  :greater_than_operator => 42,
  :less_than_or_equals_operator => 43,
  :greater_than_or_equals_operator => 44,
  :plus_sign => 45,
  :minus_sign => 46,
  :solidus => 47,
  :period => 48,
  :COUNT => 49,
  :AVG => 50,
  :MAX => 51,
  :MIN => 52,
  :SUM => 53,
  :E => 54,
  :quote => 55,
  :character_string_literal => 56,
  :DATE => 57,
  :date_string => 58,
  :TRUE => 59,
  :FALSE => 60 }

racc_nt_base = 61

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "left_paren",
  "right_paren",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "comma",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "BY",
  "HAVING",
  "ORDER",
  "unsigned_integer",
  "ASC",
  "DESC",
  "LIMIT",
  "OFFSET",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "TRUE",
  "FALSE",
  "$start",
  "statement",
  "select_statement",
  "subquery",
  "select_list",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "order_by_clause",
  "limit_clause",
  "select_sublist",
  "derived_column",
  "value_expression",
  "column_name",
  "table_reference",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "in_value_list",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "boolean_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 7)
  def _reduce_2(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 10)
  def _reduce_3(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3], val[4], val[5], val[6], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 11)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 14)
  def _reduce_5(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[1], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 16)
  def _reduce_7(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_8(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_23(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_47(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_49(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1]) 
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_66(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_108(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_113(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_136(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::True.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::False.new 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
