#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 310)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    39,    80,  -115,    25,   142,   187,    59,    80,   198,   135,
   189,     6,   190,   191,   199,    74,    73,    39,    88,   136,
   192,   138,   139,    88,   140,   141,    56,   158,    54,    15,
    56,   158,   107,  -115,  -115,  -115,    56,    42,    43,    60,
    40,    31,    33,    34,    35,    36,    15,    44,    39,    47,
    56,    25,   209,     6,    42,    43,   173,    40,    31,    33,
    34,    35,    36,   135,    44,    39,    47,   194,    25,    42,
    43,   111,   112,   136,   213,   138,   139,    15,   140,   141,
   220,   221,    57,    58,   216,    42,    43,    15,    40,    31,
    33,    34,    35,    36,    15,    44,    39,    47,   223,    25,
   225,     6,    42,    43,   226,    40,    31,    33,    34,    35,
    36,   228,    44,    39,    47,   158,    25,    56,   234,   235,
     6,    56,     7,     9,    48,    15,    49,    52,    53,   -72,
    64,    65,    39,    42,    43,   192,    40,    31,    33,    34,
    35,    36,    15,    44,    66,    47,    67,    68,    69,  -133,
    42,    43,    70,    40,    31,    33,    34,    35,    36,    71,
    44,    15,    47,    39,    72,    75,   115,    82,     6,    42,
    43,    88,    40,    31,    33,    34,    35,    36,    56,    44,
    39,    47,    95,    25,   122,    56,    11,   103,   108,   109,
   114,   119,    15,   144,   145,   146,   147,   148,   149,   150,
    42,    43,   153,    40,    31,    33,    34,    35,    36,    15,
    44,    39,    47,   154,   115,   158,   170,    42,    43,   173,
    40,    31,    33,    34,    35,    36,    88,    44,    39,    47,
   176,   192,   122,   177,   178,   179,   180,    56,    15,   119,
    15,   186,    95,   194,   nil,   nil,   nil,    39,    42,    43,
    25,    40,    31,    33,    34,    35,    36,    15,    44,   nil,
    47,   nil,   nil,   nil,   nil,    42,    43,   nil,    40,    31,
    33,    34,    35,    36,   nil,    44,    15,    47,   nil,   nil,
    39,   nil,   nil,    25,    42,    43,    97,    40,    31,    33,
    34,    35,    36,   nil,    44,   nil,    47,    39,   nil,   nil,
    25,   159,   160,   nil,   161,   162,   163,   nil,   nil,    15,
   nil,   164,   165,   166,   167,   168,   169,    42,    43,   nil,
    40,    31,    33,    34,    35,    36,    15,    44,    39,    47,
   nil,   115,   nil,   nil,    42,    43,   nil,    40,    31,    33,
    34,    35,    36,   nil,    44,    39,    47,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,    15,   nil,   nil,
   nil,   nil,   nil,   nil,    39,    42,    43,    25,    40,    31,
    33,    34,    35,    36,    15,    44,   nil,    47,   nil,   nil,
   nil,   nil,    42,    43,   nil,    40,    31,    33,    34,    35,
    36,   nil,    44,    15,    47,    39,   nil,   nil,   115,   nil,
   nil,    42,    43,   nil,    40,    31,    33,    34,    35,    36,
   nil,    44,   nil,    47,   nil,   nil,   122,   nil,   nil,   nil,
   nil,   nil,    39,   119,    15,   115,   nil,   nil,   nil,   nil,
   nil,   nil,    42,    43,   nil,    40,    31,    33,    34,    35,
    36,   nil,    44,   122,    47,   nil,   nil,   nil,   nil,    39,
   119,    15,   115,   nil,   nil,   nil,   nil,   nil,   nil,    42,
    43,   nil,    40,    31,    33,    34,    35,    36,   nil,    44,
   122,    47,    39,   nil,   nil,   192,   nil,   119,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,    43,   nil,    40,
    31,    33,    34,    35,    36,   nil,    44,    39,    47,   nil,
   192,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,
    43,   nil,    40,    31,    33,    34,    35,    36,   nil,    44,
    39,    47,   nil,   192,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,    43,   nil,    40,    31,    33,
    34,    35,    36,   nil,    44,    39,    47,   nil,   192,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    43,   nil,
    40,    31,    33,    34,    35,    36,   nil,    44,    39,    47,
   nil,   192,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    42,    43,   nil,    40,    31,    33,    34,    35,
    36,   nil,    44,    39,    47,   nil,   192,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    42,    43,   nil,    40,    31,
    33,    34,    35,    36,   nil,    44,    39,    47,   nil,   192,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    42,    43,   nil,    40,    31,    33,    34,    35,    36,   nil,
    44,    39,    47,   nil,   192,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    42,    43,   nil,    40,    31,    33,    34,
    35,    36,   nil,    44,   nil,    47,    39,   nil,   nil,   115,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    43,
   nil,    40,    31,    33,    34,    35,    36,   122,    44,    39,
    47,   nil,    25,   nil,   119,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    42,    43,   nil,    40,    31,    33,    34,
    35,    36,   nil,    44,    39,    47,   nil,    25,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
    31,    33,    34,    35,    36,   nil,    44,    39,    47,   nil,
    25,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,    43,   nil,    40,    31,    33,    34,    35,    36,
   nil,    44,    39,    47,   nil,    25,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,    43,   nil,    40,    31,    33,
    34,    35,    36,   nil,    44,    39,    47,   nil,   192,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,
    43,   nil,    40,    31,    33,    34,    35,    36,   nil,    44,
    39,    47,   nil,    25,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    42,    43,   nil,    40,    31,    33,    34,    35,
    36,   nil,    44,   nil,    47,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    43,   nil,
    40,    31,    33,    34,    35,    36,   nil,    44,   nil,    47 ]

racc_action_check = [
    68,    49,    17,    68,    84,   156,    19,   109,   163,    83,
   159,   170,   159,   159,   163,    44,    44,   191,   176,    83,
   191,    83,    83,   177,    83,    83,    84,   182,    14,    68,
    49,   156,    72,    17,    17,    17,   109,    68,    68,    19,
    68,    68,    68,    68,    68,    68,   191,    68,   192,    68,
    14,   192,   183,   192,   191,   191,   188,   191,   191,   191,
   191,   191,   191,   208,   191,    59,   191,   190,    59,    72,
    72,    78,    78,   208,   193,   208,   208,   192,   208,   208,
   208,   208,    18,    18,   198,   192,   192,   209,   192,   192,
   192,   192,   192,   192,    59,   192,   194,   192,   210,   194,
   214,   194,    59,    59,   215,    59,    59,    59,    59,    59,
    59,   221,    59,    60,    59,   227,    60,   228,   231,   232,
     0,   235,     1,     4,     7,   194,     9,    10,    13,    15,
    28,    31,   213,   194,   194,   213,   194,   194,   194,   194,
   194,   194,    60,   194,    33,   194,    34,    35,    36,    37,
    60,    60,    39,    60,    60,    60,    60,    60,    60,    40,
    60,   213,    60,   115,    41,    47,   115,    51,   115,   213,
   213,    52,   213,   213,   213,   213,   213,   213,    54,   213,
     6,   213,    63,     6,   115,    64,     6,    70,    73,    76,
    81,   115,   115,    97,    98,    99,   100,   101,   102,   106,
   115,   115,   113,   115,   115,   115,   115,   115,   115,     6,
   115,   220,   115,   114,   220,   116,   119,     6,     6,   120,
     6,     6,     6,     6,     6,     6,   135,     6,   223,     6,
   136,   223,   220,   137,   139,   140,   141,   142,   154,   220,
   220,   155,   157,   161,   nil,   nil,   nil,   226,   220,   220,
   226,   220,   220,   220,   220,   220,   220,   223,   220,   nil,
   220,   nil,   nil,   nil,   nil,   223,   223,   nil,   223,   223,
   223,   223,   223,   223,   nil,   223,   226,   223,   nil,   nil,
    65,   nil,   nil,    65,   226,   226,    65,   226,   226,   226,
   226,   226,   226,   nil,   226,   nil,   226,    66,   nil,   nil,
    66,   118,   118,   nil,   118,   118,   118,   nil,   nil,    65,
   nil,   118,   118,   118,   118,   118,   118,    65,    65,   nil,
    65,    65,    65,    65,    65,    65,    66,    65,   122,    65,
   nil,   122,   nil,   nil,    66,    66,   nil,    66,    66,    66,
    66,    66,    66,   nil,    66,    67,    66,   nil,    67,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,   nil,   nil,
   nil,   nil,   nil,   nil,    69,   122,   122,    69,   122,   122,
   122,   122,   122,   122,    67,   122,   nil,   122,   nil,   nil,
   nil,   nil,    67,    67,   nil,    67,    67,    67,    67,    67,
    67,   nil,    67,    69,    67,   153,   nil,   nil,   153,   nil,
   nil,    69,    69,   nil,    69,    69,    69,    69,    69,    69,
   nil,    69,   nil,    69,   nil,   nil,   153,   nil,   nil,   nil,
   nil,   nil,    82,   153,   153,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   153,   153,   nil,   153,   153,   153,   153,   153,
   153,   nil,   153,    82,   153,   nil,   nil,   nil,   nil,   158,
    82,    82,   158,   nil,   nil,   nil,   nil,   nil,   nil,    82,
    82,   nil,    82,    82,    82,    82,    82,    82,   nil,    82,
   158,    82,   160,   nil,   nil,   160,   nil,   158,   158,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   158,   158,   nil,   158,
   158,   158,   158,   158,   158,   nil,   158,   162,   158,   nil,
   162,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,
   160,   nil,   160,   160,   160,   160,   160,   160,   nil,   160,
   164,   160,   nil,   164,   nil,   nil,   162,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   162,   162,   nil,   162,   162,   162,
   162,   162,   162,   nil,   162,   165,   162,   nil,   165,   164,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,   164,   nil,
   164,   164,   164,   164,   164,   164,   nil,   164,   166,   164,
   nil,   166,   nil,   nil,   165,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   165,   165,   nil,   165,   165,   165,   165,   165,
   165,   nil,   165,   167,   165,   nil,   167,   166,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   166,   166,   nil,   166,   166,
   166,   166,   166,   166,   nil,   166,   168,   166,   nil,   168,
   nil,   nil,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   167,   167,   nil,   167,   167,   167,   167,   167,   167,   nil,
   167,   169,   167,   nil,   169,   168,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   168,   168,   nil,   168,   168,   168,   168,
   168,   168,   nil,   168,   nil,   168,   173,   nil,   nil,   173,
   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   169,   169,
   nil,   169,   169,   169,   169,   169,   169,   173,   169,    20,
   169,   nil,    20,   nil,   173,   173,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   173,   173,   nil,   173,   173,   173,   173,
   173,   173,   nil,   173,    53,   173,   nil,    53,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,
    20,    20,    20,    20,    20,   nil,    20,    25,    20,   nil,
    25,   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    53,    53,   nil,    53,    53,    53,    53,    53,    53,
   nil,    53,    57,    53,   nil,    57,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,    25,   nil,    25,    25,    25,
    25,    25,    25,   nil,    25,   189,    25,   nil,   189,   nil,
   nil,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,
    57,   nil,    57,    57,    57,    57,    57,    57,   nil,    57,
    58,    57,   nil,    58,   189,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   189,   189,   nil,   189,   189,   189,   189,   189,
   189,   nil,   189,   nil,   189,   nil,   nil,   nil,   nil,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,    58,   nil,
    58,    58,    58,    58,    58,    58,   nil,    58,   nil,    58 ]

racc_action_pointer = [
   110,   122,   nil,   nil,   121,   nil,   175,   124,   nil,   123,
   114,   nil,   nil,   124,    16,    84,   nil,    -9,    40,    -5,
   684,   nil,   nil,   nil,   nil,   732,   nil,   nil,    85,   nil,
   nil,   123,   nil,   136,   138,   139,   140,    98,   nil,   107,
   154,   113,   nil,   nil,   -37,   nil,   nil,   110,   nil,    -4,
   nil,   144,   137,   709,   144,   nil,   nil,   757,   805,    60,
   108,   nil,   nil,   173,   151,   275,   292,   340,    -5,   359,
   182,   nil,    27,   136,   nil,   nil,   185,   nil,    65,   nil,
   nil,   166,   417,     5,    -8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   184,   185,   186,
   187,   188,   189,   nil,   nil,   nil,   194,   nil,   nil,     2,
   nil,   nil,   nil,   177,   210,   158,   180,   nil,   275,   208,
   191,   nil,   323,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   192,   215,   218,   nil,   216,
   217,   218,   203,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   390,   204,   232,    -4,   233,   444,   -17,
   467,   235,   492,   -18,   515,   540,   563,   588,   611,   636,
     1,   nil,   nil,   661,   nil,   nil,   -16,   -11,   nil,   nil,
   nil,   nil,    -8,    48,   nil,   nil,   nil,   nil,    28,   780,
    59,    12,    43,    46,    91,   nil,   nil,   nil,    52,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,    53,
    70,   nil,   nil,   127,    91,   100,   nil,   nil,   nil,   nil,
   206,   103,   nil,   223,   nil,   nil,   242,    80,    83,   nil,
   nil,   109,   115,   nil,   nil,    87,   nil ]

racc_action_default = [
  -145,  -145,    -1,    -2,    -4,   -15,  -145,  -145,    -3,  -145,
   -17,   -18,   -19,   -21,   -24,  -139,   -99,  -100,  -103,  -106,
  -145,  -108,  -109,  -110,  -111,  -145,  -113,  -114,  -145,  -117,
  -118,  -145,  -120,  -145,  -145,  -145,  -145,  -126,  -127,  -131,
  -145,  -145,  -137,  -138,  -145,  -142,  -143,  -145,   237,  -145,
   -16,   -49,  -145,  -145,  -145,   -23,  -139,  -145,  -145,  -145,
  -145,  -107,  -115,  -145,  -145,  -145,  -145,  -145,  -145,  -145,
  -129,  -130,  -145,  -145,  -141,  -144,    -5,    -7,   -11,    -9,
   -10,   -51,  -145,   -26,   -29,   -30,   -32,   -33,   -72,   -20,
   -22,  -101,  -102,  -104,  -105,  -112,  -116,  -145,  -145,  -145,
  -145,  -145,  -145,  -128,  -132,  -134,  -145,  -136,  -140,  -145,
    -8,   -12,   -13,   -56,  -145,  -145,   -50,   -58,  -145,  -145,
   -75,   -77,  -145,   -80,   -81,   -82,   -84,   -85,   -86,   -87,
   -88,   -89,   -96,   -97,   -98,  -145,  -145,  -145,   -37,   -39,
   -41,   -42,  -145,   -28,  -119,  -121,  -122,  -123,  -124,  -125,
  -135,    -6,   -25,  -145,  -145,  -145,  -145,   -98,  -145,  -145,
  -145,  -145,  -145,  -145,  -145,  -145,  -145,  -145,  -145,  -145,
  -145,   -31,   -71,  -145,   -79,   -34,  -145,  -145,   -38,   -40,
   -43,   -27,   -57,   -52,   -54,   -55,   -14,   -83,   -76,  -145,
  -145,  -145,  -145,  -145,  -145,   -62,   -63,   -68,  -145,   -70,
   -90,   -91,   -92,   -93,   -94,   -95,   -78,   -35,  -145,  -145,
  -145,   -61,   -67,  -145,  -145,   -66,   -69,   -36,   -44,   -45,
  -145,  -145,   -53,  -145,   -60,   -64,  -145,   -46,  -145,   -59,
   -65,  -145,   -48,   -74,   -47,  -145,   -73 ]

racc_goto_table = [
    55,   116,    14,   171,   185,    84,    83,    77,    12,   214,
   219,   184,   231,   195,    93,    94,    91,    92,     1,   183,
   188,    63,   193,   206,   197,   174,   200,   201,   202,   203,
   204,   205,   106,    61,   156,    79,   104,   105,   232,    62,
    90,   230,   211,     2,     3,   171,     4,     8,    76,    14,
    96,   210,   110,   212,    10,    89,    50,    51,    81,   185,
   113,    98,    99,   100,   101,   102,   222,   151,   152,   172,
   143,   217,   182,   218,   171,   224,    62,    62,    62,    62,
   nil,   nil,   nil,   nil,   nil,   229,   nil,   nil,   175,   nil,
   nil,   nil,   nil,   nil,   nil,    79,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   157,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   181,   207,
    84,   208,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    63,   nil,
   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   233,   nil,   nil,   nil,   nil,   nil,
   nil,   236,   215 ]

racc_goto_check = [
    10,    32,    17,    11,    37,    23,    22,     7,    15,    43,
    31,    36,    33,    42,    56,    56,    54,    54,     1,    35,
    47,    17,    40,    48,    40,    49,    40,    40,    40,    40,
    40,    40,    58,    59,    32,    10,    69,    70,    34,    55,
    10,    43,    42,     2,     3,    11,     4,     5,     6,    17,
    10,    40,     9,    40,    13,    15,    14,    18,    19,    37,
    20,    17,    17,    17,    17,    17,    36,     7,    21,    25,
    10,    29,    32,    30,    11,    40,    55,    55,    55,    55,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    23,
    23,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,
    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    17 ]

racc_goto_pointer = [
   nil,    18,    43,    44,    46,    43,    -1,   -42,   nil,   -26,
   -14,  -116,   nil,    48,    46,     2,   nil,    -4,    47,     7,
   -21,   -45,   -46,   -47,   nil,   -50,   nil,   nil,   nil,  -137,
  -135,  -198,   -81,  -216,  -190,  -135,  -143,  -150,   nil,   nil,
  -138,   nil,  -148,  -185,   nil,   nil,   nil,  -138,  -150,   -97,
   nil,   nil,   nil,   nil,   -41,    19,   -45,   nil,   -40,    13,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -36,
   -35,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,    78,   nil,
    29,   117,     5,   nil,   nil,   nil,    13,   134,   nil,   nil,
   nil,   nil,   nil,    30,    85,   196,    86,    87,   137,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   133,   127,
   118,   128,   nil,   nil,   129,   130,   131,   120,   121,   123,
   124,   125,   126,   132,    16,    17,    18,    19,    20,    21,
    22,    24,    26,    27,    28,    32,    37,    38,    41,   nil,
   nil,    45,    46 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 57, :_reduce_none,
  1, 58, :_reduce_none,
  2, 59, :_reduce_3,
  0, 61, :_reduce_none,
  3, 61, :_reduce_5,
  3, 62, :_reduce_6,
  1, 62, :_reduce_none,
  2, 63, :_reduce_8,
  1, 64, :_reduce_none,
  1, 64, :_reduce_10,
  0, 65, :_reduce_11,
  1, 65, :_reduce_12,
  1, 65, :_reduce_13,
  3, 67, :_reduce_14,
  1, 60, :_reduce_none,
  3, 68, :_reduce_16,
  2, 68, :_reduce_17,
  1, 69, :_reduce_18,
  1, 69, :_reduce_19,
  3, 71, :_reduce_20,
  1, 71, :_reduce_none,
  3, 72, :_reduce_22,
  2, 72, :_reduce_23,
  1, 72, :_reduce_none,
  4, 70, :_reduce_25,
  2, 74, :_reduce_26,
  3, 78, :_reduce_27,
  2, 78, :_reduce_28,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 81, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  3, 82, :_reduce_34,
  4, 82, :_reduce_35,
  5, 83, :_reduce_36,
  1, 84, :_reduce_37,
  2, 84, :_reduce_38,
  1, 84, :_reduce_39,
  2, 84, :_reduce_40,
  1, 84, :_reduce_41,
  1, 84, :_reduce_42,
  2, 84, :_reduce_43,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  2, 86, :_reduce_46,
  4, 87, :_reduce_47,
  1, 89, :_reduce_none,
  0, 75, :_reduce_none,
  2, 75, :_reduce_50,
  0, 76, :_reduce_none,
  3, 76, :_reduce_52,
  3, 91, :_reduce_53,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  0, 77, :_reduce_none,
  2, 77, :_reduce_57,
  1, 94, :_reduce_none,
  6, 95, :_reduce_59,
  5, 95, :_reduce_60,
  4, 97, :_reduce_61,
  3, 97, :_reduce_62,
  1, 98, :_reduce_none,
  3, 98, :_reduce_64,
  3, 99, :_reduce_65,
  1, 99, :_reduce_none,
  4, 100, :_reduce_67,
  3, 100, :_reduce_68,
  4, 101, :_reduce_69,
  3, 101, :_reduce_70,
  2, 102, :_reduce_71,
  1, 79, :_reduce_72,
  3, 90, :_reduce_73,
  1, 90, :_reduce_none,
  1, 88, :_reduce_none,
  3, 88, :_reduce_76,
  1, 103, :_reduce_none,
  3, 103, :_reduce_78,
  2, 104, :_reduce_79,
  1, 104, :_reduce_none,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_83,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  3, 108, :_reduce_90,
  3, 108, :_reduce_91,
  3, 108, :_reduce_92,
  3, 108, :_reduce_93,
  3, 108, :_reduce_94,
  3, 108, :_reduce_95,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 109, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 110, :_reduce_101,
  3, 110, :_reduce_102,
  1, 110, :_reduce_none,
  3, 112, :_reduce_104,
  3, 112, :_reduce_105,
  1, 112, :_reduce_none,
  2, 113, :_reduce_107,
  1, 113, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  3, 115, :_reduce_112,
  1, 116, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 93, :_reduce_116,
  1, 93, :_reduce_none,
  1, 120, :_reduce_none,
  4, 117, :_reduce_119,
  1, 117, :_reduce_none,
  4, 121, :_reduce_121,
  4, 121, :_reduce_122,
  4, 121, :_reduce_123,
  4, 121, :_reduce_124,
  4, 121, :_reduce_125,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  3, 122, :_reduce_128,
  2, 122, :_reduce_129,
  2, 122, :_reduce_130,
  1, 122, :_reduce_131,
  3, 123, :_reduce_132,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  2, 126, :_reduce_135,
  1, 126, :_reduce_136,
  1, 114, :_reduce_137,
  1, 114, :_reduce_138,
  1, 66, :_reduce_139,
  3, 111, :_reduce_140,
  2, 111, :_reduce_141,
  1, 111, :_reduce_none,
  1, 127, :_reduce_none,
  2, 128, :_reduce_144 ]

racc_reduce_n = 145

racc_shift_n = 237

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :SELECT => 10,
  :asterisk => 11,
  :AS => 12,
  :FROM => 13,
  :CROSS => 14,
  :JOIN => 15,
  :INNER => 16,
  :LEFT => 17,
  :OUTER => 18,
  :RIGHT => 19,
  :FULL => 20,
  :ON => 21,
  :USING => 22,
  :WHERE => 23,
  :GROUP => 24,
  :HAVING => 25,
  :NOT => 26,
  :BETWEEN => 27,
  :AND => 28,
  :IN => 29,
  :LIKE => 30,
  :IS => 31,
  :NULL => 32,
  :EXISTS => 33,
  :identifier => 34,
  :OR => 35,
  :equals_operator => 36,
  :not_equals_operator => 37,
  :less_than_operator => 38,
  :greater_than_operator => 39,
  :less_than_or_equals_operator => 40,
  :greater_than_or_equals_operator => 41,
  :plus_sign => 42,
  :minus_sign => 43,
  :solidus => 44,
  :period => 45,
  :COUNT => 46,
  :AVG => 47,
  :MAX => 48,
  :MIN => 49,
  :SUM => 50,
  :E => 51,
  :quote => 52,
  :character_string_literal => 53,
  :DATE => 54,
  :date_string => 55 }

racc_nt_base = 56

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "value_expression",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_reference",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "in_value_list",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.racc', 12)
  def _reduce_3(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.racc', 17)
  def _reduce_5(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_6(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_8(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_53(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_65(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_73(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_107(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_112(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_135(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
