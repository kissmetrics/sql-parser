#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 325)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    42,    89,    68,   143,    89,    63,   101,   224,     7,   213,
   135,     8,   136,   225,   137,   124,   215,    42,   216,   217,
   218,    83,    82,   138,   150,    66,    67,    65,    65,   128,
   129,   147,    18,    65,    42,    69,    65,   218,   183,  -122,
    45,    46,   139,    43,    34,    36,    37,    38,    39,    18,
    47,    42,    50,    65,    28,    45,    46,    45,    46,     8,
    43,    34,    36,    37,    38,    39,    18,    47,   142,    50,
  -122,  -122,  -122,   126,    45,    46,   125,    43,    34,    36,
    37,    38,    39,    18,    47,    42,    50,   163,    28,   164,
   165,    45,    46,     8,    43,    34,    36,    37,    38,    39,
   166,    47,    42,    50,   167,    28,   168,   169,   120,   171,
   172,    14,    65,    58,    58,   178,   179,    18,   112,    42,
   183,    65,   218,   195,   198,    45,    46,    58,    43,    34,
    36,    37,    38,    39,    18,    47,    42,    50,   104,   218,
   201,   202,    45,    46,    84,    43,    34,    36,    37,    38,
    39,    18,    47,    18,    50,   212,    81,   112,    80,    45,
    46,    65,    43,    34,    36,    37,    38,    39,    18,    47,
    42,    50,    79,   143,   220,  -140,    45,    46,    78,    43,
    34,    36,    37,    38,    39,    77,    47,    42,    50,    76,
    28,    75,    74,    73,   150,     8,   -79,    62,    61,   235,
   183,   147,    18,   236,    42,   198,    58,    28,   220,    52,
    45,    46,    51,    43,    34,    36,    37,    38,    39,    18,
    47,    42,    50,   240,    28,    12,   242,    45,    46,   183,
    43,    34,    36,    37,    38,    39,    18,    47,    42,    50,
    65,    28,    18,   247,    45,    46,    11,    43,    34,    36,
    37,    38,    39,    18,    47,    42,    50,   249,    28,   250,
   251,    45,    46,     9,    43,    34,    36,    37,    38,    39,
    18,    47,    42,    50,    93,    28,   133,    58,    45,    46,
   nil,    43,    34,    36,    37,    38,    39,    18,    47,   nil,
    50,   nil,   nil,   nil,   nil,    45,    46,   nil,    43,    34,
    36,    37,    38,    39,    18,    47,    42,    50,   nil,   143,
   nil,   nil,    45,    46,     8,    43,    34,    36,    37,    38,
    39,   nil,    47,    42,    50,   nil,    28,   nil,   nil,   nil,
   150,   nil,   nil,   nil,   nil,   nil,   nil,   147,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    43,
    34,    36,    37,    38,    39,    18,    47,    42,    50,   nil,
    28,   nil,   nil,    45,    46,   nil,    43,    34,    36,    37,
    38,    39,   nil,    47,    42,    50,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   114,   nil,   nil,   nil,   nil,   nil,    18,
   nil,    42,   nil,   nil,    28,   nil,   nil,    45,    46,   nil,
    43,    34,    36,    37,    38,    39,    18,    47,    42,    50,
   nil,    28,   nil,   nil,    45,    46,   nil,    43,    34,    36,
    37,    38,    39,    18,    47,    42,    50,   nil,    28,   nil,
   nil,    45,    46,   nil,    43,    34,    36,    37,    38,    39,
    18,    47,    42,    50,   nil,    28,   nil,   nil,    45,    46,
   nil,    43,    34,    36,    37,    38,    39,    18,    47,   nil,
    50,   nil,   nil,   nil,   nil,    45,    46,   nil,    43,    34,
    36,    37,    38,    39,    18,    47,    42,    50,   nil,   143,
   nil,   nil,    45,    46,   nil,    43,    34,    36,    37,    38,
    39,   nil,    47,    42,    50,   nil,   218,   nil,   nil,   nil,
   150,   nil,   nil,    42,   nil,   nil,    28,   147,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    43,
    34,    36,    37,    38,    39,    18,    47,    42,    50,   nil,
    28,   nil,   nil,    45,    46,    18,    43,    34,    36,    37,
    38,    39,   nil,    47,   nil,    50,    43,    34,    36,    37,
    38,    39,   nil,    47,    42,    50,   nil,   218,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,    94,
    43,    34,    36,    37,    38,    39,   nil,    47,    42,    50,
   nil,   218,    95,   nil,    97,    98,    18,    99,   100,   206,
   207,   nil,   nil,   nil,    45,    46,    94,    43,    34,    36,
    37,    38,    39,   nil,    47,    42,    50,   nil,   218,    95,
    18,    97,    98,   nil,    99,   100,   nil,   nil,    45,    46,
   nil,    43,    34,    36,    37,    38,    39,   nil,    47,    42,
    50,   nil,   218,   nil,   nil,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    43,    34,
    36,    37,    38,    39,   nil,    47,    42,    50,   nil,   218,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
    46,   nil,    43,    34,    36,    37,    38,    39,   nil,    47,
    42,    50,   nil,   218,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,    43,
    34,    36,    37,    38,    39,   nil,    47,    42,    50,   nil,
   218,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,    46,   nil,    43,    34,    36,    37,    38,    39,   nil,
    47,   nil,    50,   nil,    42,   nil,   nil,   143,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,
    43,    34,    36,    37,    38,    39,   nil,    47,   150,    50,
   nil,    42,   nil,   nil,   143,   147,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,    46,   nil,    43,    34,    36,
    37,    38,    39,   nil,    47,   150,    50,    42,   nil,   nil,
    28,   nil,   147,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,    46,   nil,    43,    34,    36,    37,    38,    39,
   nil,    47,    42,    50,   nil,   143,   nil,   nil,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,    46,   nil,
    43,    34,    36,    37,    38,    39,   nil,    47,   nil,    50,
   nil,   nil,   nil,   147,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    46,   nil,    43,    34,    36,    37,    38,
    39,    94,    47,   nil,    50,    92,   nil,   nil,   nil,    93,
   nil,   nil,   nil,   nil,    95,   nil,    97,    98,   nil,    99,
   100,   184,   185,   nil,   186,   187,   188,   nil,   nil,   nil,
   nil,   189,   190,   191,   192,   193,   194 ]

racc_action_check = [
   104,    52,    22,   104,   126,    17,    54,   188,     0,   181,
    95,     0,    96,   188,    98,    81,   184,   247,   184,   184,
   247,    47,    47,    99,   104,    21,    21,    17,    54,    87,
    87,   104,   104,    52,   240,    22,   126,   240,   181,    20,
   104,   104,   100,   104,   104,   104,   104,   104,   104,   247,
   104,   220,   104,   101,   220,    81,    81,   247,   247,   220,
   247,   247,   247,   247,   247,   247,   240,   247,   103,   247,
    20,    20,    20,    85,   240,   240,    82,   240,   240,   240,
   240,   240,   240,   220,   240,   218,   240,   114,   218,   115,
   116,   220,   220,   218,   220,   220,   220,   220,   220,   220,
   117,   220,     8,   220,   118,     8,   119,   123,    79,   131,
   132,     8,    73,   135,   136,   141,   142,   218,    72,   217,
   144,    63,   217,   147,   148,   218,   218,    61,   218,   218,
   218,   218,   218,   218,     8,   218,   215,   218,    60,   215,
   173,   174,     8,     8,    50,     8,     8,     8,     8,     8,
     8,   217,     8,   179,     8,   180,    44,   182,    43,   217,
   217,   251,   217,   217,   217,   217,   217,   217,   215,   217,
   206,   217,    42,   206,   186,    40,   215,   215,    39,   215,
   215,   215,   215,   215,   215,    38,   215,   202,   215,    37,
   202,    36,    34,    31,   206,   195,    18,    16,    13,   207,
   208,   206,   206,   209,    62,   214,    12,    62,   216,    11,
   206,   206,     9,   206,   206,   206,   206,   206,   206,   202,
   206,    66,   206,   219,    66,     7,   224,   202,   202,   234,
   202,   202,   202,   202,   202,   202,    62,   202,    67,   202,
   235,    67,   236,   237,    62,    62,     5,    62,    62,    62,
    62,    62,    62,    66,    62,    68,    62,   241,    68,   243,
   244,    66,    66,     1,    66,    66,    66,    66,    66,    66,
    67,    66,    69,    66,    91,    69,    93,    94,    67,    67,
   nil,    67,    67,    67,    67,    67,    67,    68,    67,   nil,
    67,   nil,   nil,   nil,   nil,    68,    68,   nil,    68,    68,
    68,    68,    68,    68,    69,    68,   143,    68,   nil,   143,
   nil,   nil,    69,    69,   143,    69,    69,    69,    69,    69,
    69,   nil,    69,   133,    69,   nil,   133,   nil,   nil,   nil,
   143,   nil,   nil,   nil,   nil,   nil,   nil,   143,   143,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   143,   143,   nil,   143,
   143,   143,   143,   143,   143,   133,   143,    75,   143,   nil,
    75,   nil,   nil,   133,   133,   nil,   133,   133,   133,   133,
   133,   133,   nil,   133,    74,   133,   nil,    74,   nil,   nil,
   nil,   nil,   nil,    74,   nil,   nil,   nil,   nil,   nil,    75,
   nil,    76,   nil,   nil,    76,   nil,   nil,    75,    75,   nil,
    75,    75,    75,    75,    75,    75,    74,    75,    77,    75,
   nil,    77,   nil,   nil,    74,    74,   nil,    74,    74,    74,
    74,    74,    74,    76,    74,    78,    74,   nil,    78,   nil,
   nil,    76,    76,   nil,    76,    76,    76,    76,    76,    76,
    77,    76,    92,    76,   nil,    92,   nil,   nil,    77,    77,
   nil,    77,    77,    77,    77,    77,    77,    78,    77,   nil,
    77,   nil,   nil,   nil,   nil,    78,    78,   nil,    78,    78,
    78,    78,    78,    78,    92,    78,   198,    78,   nil,   198,
   nil,   nil,    92,    92,   nil,    92,    92,    92,    92,    92,
    92,   nil,    92,   194,    92,   nil,   194,   nil,   nil,   nil,
   198,   nil,   nil,    23,   nil,   nil,    23,   198,   198,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   198,   198,   nil,   198,
   198,   198,   198,   198,   198,   194,   198,    28,   198,   nil,
    28,   nil,   nil,   194,   194,    23,   194,   194,   194,   194,
   194,   194,   nil,   194,   nil,   194,    23,    23,    23,    23,
    23,    23,   nil,    23,   193,    23,   nil,   193,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,    28,   176,
    28,    28,    28,    28,    28,    28,   nil,    28,   192,    28,
   nil,   192,   176,   nil,   176,   176,   193,   176,   176,   176,
   176,   nil,   nil,   nil,   193,   193,   105,   193,   193,   193,
   193,   193,   193,   nil,   193,   191,   193,   nil,   191,   105,
   192,   105,   105,   nil,   105,   105,   nil,   nil,   192,   192,
   nil,   192,   192,   192,   192,   192,   192,   nil,   192,   190,
   192,   nil,   190,   nil,   nil,   nil,   nil,   191,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   191,   191,   nil,   191,   191,
   191,   191,   191,   191,   nil,   191,   189,   191,   nil,   189,
   nil,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   190,
   190,   nil,   190,   190,   190,   190,   190,   190,   nil,   190,
   187,   190,   nil,   187,   nil,   nil,   nil,   nil,   189,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   189,   189,   nil,   189,
   189,   189,   189,   189,   189,   nil,   189,   185,   189,   nil,
   185,   nil,   187,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   187,   187,   nil,   187,   187,   187,   187,   187,   187,   nil,
   187,   nil,   187,   nil,   183,   nil,   nil,   183,   nil,   185,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,   185,   nil,
   185,   185,   185,   185,   185,   185,   nil,   185,   183,   185,
   nil,   178,   nil,   nil,   178,   183,   183,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   183,   183,   nil,   183,   183,   183,
   183,   183,   183,   nil,   183,   178,   183,   172,   nil,   nil,
   172,   nil,   178,   178,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   178,   178,   nil,   178,   178,   178,   178,   178,   178,
   nil,   178,   150,   178,   nil,   150,   nil,   nil,   nil,   172,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   172,   172,   nil,
   172,   172,   172,   172,   172,   172,   nil,   172,   nil,   172,
   nil,   nil,   nil,   150,   150,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   150,   150,   nil,   150,   150,   150,   150,   150,
   150,    53,   150,   nil,   150,    53,   nil,   nil,   nil,    53,
   nil,   nil,   nil,   nil,    53,   nil,    53,    53,   nil,    53,
    53,   146,   146,   nil,   146,   146,   146,   nil,   nil,   nil,
   nil,   146,   146,   146,   146,   146,   146 ]

racc_action_pointer = [
    -2,   263,   nil,   nil,   nil,   244,   nil,   214,    97,   212,
   nil,   206,   169,   182,   nil,   nil,   193,   -10,   148,   nil,
    25,   -20,   -12,   498,   nil,   nil,   nil,   nil,   522,   nil,
   nil,   145,   nil,   nil,   184,   nil,   183,   181,   177,   170,
   121,   nil,   124,   153,   102,   nil,   nil,   -34,   nil,   nil,
    86,   nil,    -4,   857,    -9,   nil,   nil,   nil,   nil,   nil,
   112,    90,   199,    84,   nil,   nil,   216,   233,   250,   267,
   nil,   nil,   109,    75,   369,   352,   386,   403,   420,   103,
   nil,    10,    21,   nil,   nil,    69,   nil,    23,   nil,   nil,
   nil,   262,   437,   268,   240,    -8,    -6,   nil,    -7,     2,
    21,    16,   nil,    41,    -5,   592,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    78,    80,    81,    91,    95,    97,
   nil,   nil,   nil,   102,   nil,   nil,    -1,   nil,   nil,   nil,
   nil,   100,   106,   318,   nil,    76,    77,   nil,   nil,   nil,
   nil,    87,   113,   301,    82,   nil,   852,   115,    93,   nil,
   807,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   782,   131,   137,   nil,   565,   nil,   756,   116,
   146,     0,   148,   729,   -14,   702,   166,   675,   -22,   651,
   624,   600,   573,   549,   488,   182,   nil,   nil,   471,   nil,
   nil,   nil,   182,   nil,   nil,   nil,   165,   191,   162,   199,
   nil,   nil,   nil,   nil,   174,   131,   200,   114,    80,   192,
    46,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   191,   203,   205,   212,   nil,   nil,
    29,   248,   nil,   250,   256,   nil,   nil,    12,   nil,   nil,
   nil,   124,   nil,   nil ]

racc_action_default = [
  -152,  -152,    -1,    -2,    -3,    -5,   -16,  -152,  -152,  -152,
    -4,  -152,  -152,   -24,   -25,   -26,   -28,   -31,  -146,  -106,
  -107,  -110,  -113,  -152,  -115,  -116,  -117,  -118,  -152,  -120,
  -121,  -152,  -124,  -125,  -152,  -127,  -152,  -152,  -152,  -152,
  -133,  -134,  -138,  -152,  -152,  -144,  -145,  -152,  -149,  -150,
  -152,   254,  -152,  -152,   -36,   -37,   -39,   -40,   -79,   -23,
   -56,  -152,  -152,  -152,   -30,  -146,  -152,  -152,  -152,  -152,
  -114,  -122,  -152,  -152,  -152,  -152,  -152,  -152,  -152,  -136,
  -137,  -152,  -152,  -148,  -151,    -6,    -8,   -12,   -10,   -11,
   -17,  -152,  -152,  -152,  -152,  -152,  -152,   -44,   -46,   -48,
   -49,  -152,   -35,   -58,  -152,   -33,   -27,   -29,  -108,  -109,
  -111,  -112,  -119,  -123,  -152,  -152,  -152,  -152,  -152,  -152,
  -135,  -139,  -141,  -152,  -143,  -147,  -152,    -9,   -13,   -14,
   -18,  -152,   -21,  -152,   -41,  -152,  -152,   -45,   -47,   -50,
   -34,   -63,  -152,  -152,   -57,   -65,  -152,  -152,   -82,   -84,
  -152,   -87,   -88,   -89,   -91,   -92,   -93,   -94,   -95,   -96,
  -103,  -104,  -105,  -126,  -128,  -129,  -130,  -131,  -132,  -142,
    -7,   -19,  -152,  -152,   -73,   -42,  -152,   -32,  -152,  -152,
  -152,  -152,  -105,  -152,  -152,  -152,  -152,  -152,  -152,  -152,
  -152,  -152,  -152,  -152,  -152,  -152,   -38,   -78,  -152,   -86,
   -20,   -22,  -152,   -43,   -51,   -52,  -152,  -152,   -64,   -59,
   -61,   -62,   -15,   -90,   -83,  -152,  -152,  -152,  -152,  -152,
  -152,   -69,   -70,   -75,  -152,   -77,   -97,   -98,   -99,  -100,
  -101,  -102,   -85,   -72,   -53,  -152,  -152,  -152,   -68,   -74,
  -152,  -152,   -76,  -152,   -55,   -81,   -60,  -152,   -67,   -71,
   -54,  -152,   -66,   -80 ]

racc_goto_table = [
    64,    17,   144,    53,   173,    54,   131,    86,   196,   210,
   219,     1,   223,    90,   226,   227,   228,   229,   230,   231,
    15,    72,   211,   221,   110,   111,   108,   109,   243,   244,
   209,   214,   232,   199,   123,    88,    70,   102,   121,   122,
   237,   181,   239,   205,     2,     3,   107,   196,     4,    71,
     5,   130,   105,   238,    54,    17,   113,    10,    85,   127,
    91,    13,    59,    60,   103,   248,   246,   115,   116,   117,
   118,   119,   252,   233,   106,   141,   208,   196,   177,   211,
   197,   170,   203,   204,   140,   132,   200,   134,   nil,   nil,
   nil,   241,    71,    71,    71,    71,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   234,   nil,   nil,   nil,   nil,    88,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   174,   176,   175,    54,
   nil,   nil,   nil,   nil,   nil,   nil,   182,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   174,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    72,   nil,   174,   nil,   nil,   nil,   nil,   245,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   253 ]

racc_goto_check = [
    11,    18,    37,    14,    19,    28,    17,     8,    12,    41,
    45,     1,    45,    15,    45,    45,    45,    45,    45,    45,
    22,    18,    42,    47,    60,    60,    58,    58,    38,    39,
    40,    51,    52,    53,    62,    11,    63,    11,    73,    74,
    45,    37,    45,    36,     2,     3,    11,    12,     4,    59,
     5,    15,    14,    47,    28,    18,    11,     6,     7,    10,
    16,    20,    21,    24,    25,    45,    41,    18,    18,    18,
    18,    18,    45,    19,    22,    26,    37,    12,    27,    42,
    30,     8,    34,    35,    11,    18,    17,    28,   nil,   nil,
   nil,    19,    59,    59,    59,    59,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,    11,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,    14,    28,    28,
   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    18,   nil,    18,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,    11,    44,    45,    48,    50,    52,     6,   -45,   nil,
   -28,   -17,  -139,   nil,    -9,   -40,     7,   -86,    -7,  -129,
    53,    49,    12,   nil,    50,     4,   -28,   -63,    -7,   nil,
   -67,   nil,   nil,   nil,   -94,   -93,  -133,  -102,  -207,  -206,
  -149,  -170,  -157,   nil,   nil,  -175,   nil,  -163,   nil,   nil,
   nil,  -152,  -166,  -117,   nil,   nil,   nil,   nil,   -40,    26,
   -44,   nil,   -47,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -43,   -42,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   180,   nil,   nil,   nil,    87,
   nil,    32,   145,     6,   nil,   nil,   nil,   nil,   162,   nil,
   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,    33,    55,
   222,    56,    57,    96,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   161,   155,   146,   156,   nil,   157,   158,
   159,   148,   149,   151,   152,   153,   154,   160,    19,    20,
    21,    22,    23,    24,    25,    27,    29,    30,    31,    35,
    40,    41,    44,   nil,   nil,    48,    49 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 60, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  2, 62, :_reduce_4,
  0, 65, :_reduce_none,
  3, 65, :_reduce_6,
  3, 66, :_reduce_7,
  1, 66, :_reduce_none,
  2, 67, :_reduce_9,
  1, 68, :_reduce_none,
  1, 68, :_reduce_11,
  0, 69, :_reduce_12,
  1, 69, :_reduce_13,
  1, 69, :_reduce_14,
  3, 71, :_reduce_15,
  1, 64, :_reduce_none,
  4, 63, :_reduce_17,
  5, 63, :_reduce_18,
  3, 75, :_reduce_19,
  3, 76, :_reduce_20,
  1, 76, :_reduce_none,
  4, 74, :_reduce_22,
  3, 72, :_reduce_23,
  2, 72, :_reduce_24,
  1, 79, :_reduce_25,
  1, 79, :_reduce_26,
  3, 81, :_reduce_27,
  1, 81, :_reduce_none,
  3, 82, :_reduce_29,
  2, 82, :_reduce_30,
  1, 82, :_reduce_none,
  4, 80, :_reduce_32,
  2, 83, :_reduce_33,
  3, 73, :_reduce_34,
  2, 73, :_reduce_35,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 89, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  3, 90, :_reduce_41,
  4, 90, :_reduce_42,
  5, 91, :_reduce_43,
  1, 92, :_reduce_44,
  2, 92, :_reduce_45,
  1, 92, :_reduce_46,
  2, 92, :_reduce_47,
  1, 92, :_reduce_48,
  1, 92, :_reduce_49,
  2, 92, :_reduce_50,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  2, 94, :_reduce_53,
  4, 95, :_reduce_54,
  1, 97, :_reduce_none,
  0, 84, :_reduce_none,
  2, 84, :_reduce_57,
  0, 85, :_reduce_none,
  3, 85, :_reduce_59,
  3, 99, :_reduce_60,
  1, 99, :_reduce_none,
  1, 100, :_reduce_none,
  0, 86, :_reduce_none,
  2, 86, :_reduce_64,
  1, 102, :_reduce_none,
  6, 103, :_reduce_66,
  5, 103, :_reduce_67,
  4, 105, :_reduce_68,
  3, 105, :_reduce_69,
  1, 106, :_reduce_none,
  3, 106, :_reduce_71,
  3, 78, :_reduce_72,
  1, 78, :_reduce_none,
  4, 107, :_reduce_74,
  3, 107, :_reduce_75,
  4, 108, :_reduce_76,
  3, 108, :_reduce_77,
  2, 109, :_reduce_78,
  1, 87, :_reduce_79,
  3, 98, :_reduce_80,
  1, 98, :_reduce_none,
  1, 96, :_reduce_none,
  3, 96, :_reduce_83,
  1, 110, :_reduce_none,
  3, 110, :_reduce_85,
  2, 111, :_reduce_86,
  1, 111, :_reduce_none,
  1, 112, :_reduce_none,
  1, 113, :_reduce_none,
  3, 113, :_reduce_90,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  3, 115, :_reduce_97,
  3, 115, :_reduce_98,
  3, 115, :_reduce_99,
  3, 115, :_reduce_100,
  3, 115, :_reduce_101,
  3, 115, :_reduce_102,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 116, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  3, 117, :_reduce_108,
  3, 117, :_reduce_109,
  1, 117, :_reduce_none,
  3, 119, :_reduce_111,
  3, 119, :_reduce_112,
  1, 119, :_reduce_none,
  2, 120, :_reduce_114,
  1, 120, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 122, :_reduce_119,
  1, 123, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 101, :_reduce_123,
  1, 101, :_reduce_none,
  1, 127, :_reduce_none,
  4, 124, :_reduce_126,
  1, 124, :_reduce_none,
  4, 128, :_reduce_128,
  4, 128, :_reduce_129,
  4, 128, :_reduce_130,
  4, 128, :_reduce_131,
  4, 128, :_reduce_132,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 129, :_reduce_135,
  2, 129, :_reduce_136,
  2, 129, :_reduce_137,
  1, 129, :_reduce_138,
  3, 130, :_reduce_139,
  1, 131, :_reduce_none,
  1, 132, :_reduce_none,
  2, 133, :_reduce_142,
  1, 133, :_reduce_143,
  1, 121, :_reduce_144,
  1, 121, :_reduce_145,
  1, 70, :_reduce_146,
  3, 118, :_reduce_147,
  2, 118, :_reduce_148,
  1, 118, :_reduce_none,
  1, 134, :_reduce_none,
  2, 135, :_reduce_151 ]

racc_reduce_n = 152

racc_shift_n = 254

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :VALUES => 12,
  :SELECT => 13,
  :asterisk => 14,
  :AS => 15,
  :FROM => 16,
  :CROSS => 17,
  :JOIN => 18,
  :INNER => 19,
  :LEFT => 20,
  :OUTER => 21,
  :RIGHT => 22,
  :FULL => 23,
  :ON => 24,
  :USING => 25,
  :WHERE => 26,
  :GROUP => 27,
  :HAVING => 28,
  :NOT => 29,
  :BETWEEN => 30,
  :AND => 31,
  :IN => 32,
  :LIKE => 33,
  :IS => 34,
  :NULL => 35,
  :EXISTS => 36,
  :identifier => 37,
  :OR => 38,
  :equals_operator => 39,
  :not_equals_operator => 40,
  :less_than_operator => 41,
  :greater_than_operator => 42,
  :less_than_or_equals_operator => 43,
  :greater_than_or_equals_operator => 44,
  :plus_sign => 45,
  :minus_sign => 46,
  :solidus => 47,
  :period => 48,
  :COUNT => 49,
  :AVG => 50,
  :MAX => 51,
  :MIN => 52,
  :SUM => 53,
  :E => 54,
  :quote => 55,
  :character_string_literal => 56,
  :DATE => 57,
  :date_string => 58 }

racc_nt_base = 59

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_60(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_72(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_80(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_90(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_114(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_119(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_142(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
